rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isGoogleUser() {
      return request.auth.token.firebase.sign_in_provider == "google.com";
    }

    function isServiceAccount() {
      return request.auth.token.firebase.sign_in_provider == "service_account";
    }

    function hasValidFields(required, optional) {
      let allFields = required.concat(optional);
      return request.resource.data.keys().hasAll(required) &&
             request.resource.data.keys().hasOnly(allFields);
    }

    function isWorkspaceMember(workspaceData) {
      return isOwner(workspaceData.ownerId) || 
             (workspaceData.members != null && request.auth.uid in workspaceData.members);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated() && isOwner(userId);
    }

    // Subscriptions collection
    match /subscriptions/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Only backend can write subscriptions
    }

    // Workspaces collection
    match /workspaces/{workspaceId} {
      allow read: if isAuthenticated() && (
        resource == null || 
        isWorkspaceMember(resource.data)
      );
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && isWorkspaceMember(resource.data);
    }

    // Projects collection
    match /projects/{projectId} {
      function isWorkspaceMember(workspaceId) {
        let workspace = get(/databases/$(database)/documents/workspaces/$(workspaceId));
        return workspace != null && (
          workspace.data.ownerId == request.auth.uid || 
          (workspace.data.members is list && request.auth.uid in workspace.data.members)
        );
      }

      allow read: if request.auth != null;
      
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.workspaceId is string &&
        isWorkspaceMember(request.resource.data.workspaceId);
      
      allow update, delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;

      // Project content subcollection
      match /content/{contentId} {
        allow read, write: if request.auth != null;
      }

      // Project tweets subcollection
      match /tweets/{tweetId} {
        allow read, write: if request.auth != null;
      }
    }

    // Credits collection
    match /credits/{creditId} {
      allow read: if isAuthenticated() && isOwner(creditId);
      allow write: if isAuthenticated() && isOwner(creditId);
    }

    // Credit usage collection
    match /credit_usage/{usageId} {
      allow read: if isAuthenticated() && 
                 (resource == null || isOwner(resource.data.userId));
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
    }

    // Monthly usage collection
    match /monthly_usage/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
    }

    // Credit purchases collection
    match /credit_purchases/{purchaseId} {
      allow read: if isAuthenticated() && 
                 (resource == null || isOwner(resource.data.userId));
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      allow update: if isServiceAccount();
    }

    // Existing rules...
    match /{document=**} {
      allow read, write: if false; // Deny all by default
    }
  }
} 