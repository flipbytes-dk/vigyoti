rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isGoogleUser() {
      return request.auth.token.firebase.sign_in_provider == "google.com";
    }

    function isServiceAccount() {
      return request.auth.token.firebase.sign_in_provider == "service_account";
    }

    function hasValidFields(required, optional) {
      let allFields = required.concat(optional);
      return request.resource.data.keys().hasAll(required) &&
             request.resource.data.keys().hasOnly(allFields);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false;
    }

    // Subscriptions collection
    match /subscriptions/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Only backend can write subscriptions
    }

    // Workspaces collection
    match /workspaces/{workspaceId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid in (resource.data.members || [])
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid in (resource.data.members || [])
      );
      allow delete: if false;
    }

    // Projects collection
    match /projects/{projectId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid in (resource.data.members || [])
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid in (resource.data.members || [])
      );
      allow delete: if false;
    }

    // Credits collection
    match /credits/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isServiceAccount();
    }

    // Credit usage collection
    match /credit_usage/{usageId} {
      allow read: if isAuthenticated() && 
                 (resource == null || isOwner(resource.data.userId));
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
    }

    // Monthly usage collection
    match /monthly_usage/{docId} {
      allow read: if isAuthenticated() && 
                 (resource == null || isOwner(resource.data.userId));
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                   (resource.data.userId == request.auth.uid || isServiceAccount());
    }

    // Credit purchases collection
    match /credit_purchases/{purchaseId} {
      allow read: if isAuthenticated() && 
                 (resource == null || isOwner(resource.data.userId));
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      allow update: if isServiceAccount();
    }

    // Existing rules...
    match /{document=**} {
      allow read, write: if false; // Deny all by default
    }
  }
} 